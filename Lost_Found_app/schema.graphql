schema {
  query: Query
  mutation: Mutation
}

type AnnouncementType {
  id: ID!
  userProfile: UserProfileType!
  title: String!
  streetName: String!
  coordonates: String!
  image: String!
  annType: String!
  content: String!
  tags: [TagType!]!
  reward: Int!
  passedTime: String!
}

type CreateAnnouncement {
  id: ID
  msg: String
}

type CreateTags {
  msg: String
  tag: TagType
}

type CreateUser {
  id: ID
}

scalar Date

type DeleteAnnouncement {
  id: ID
}

scalar GenericScalar

type Mutation {
  createUser(email: String!, password: String!): CreateUser
  login(email: String!, password: String!): ObtainJSONWebToken
  verifyToken(token: String): Verify
  refreshToken(token: String): Refresh
  updateUserProfile(dateOfBirth: String, firstName: String, image: Upload, lastName: String, phoneNumber: String): UpdateUserProfile
  createNewAnnouncement(annType: String!, content: String!, coordonates: String!, image: Upload, reward: Int, streetName: String!, tag: String!, title: String!): CreateAnnouncement
  updateAnnouncement(annId: Int!, content: String!, coordonates: String, image: Upload, reward: Int, streetName: String, title: String): UpdateAnnouncement
  deleteAnnouncement(annId: Int!): DeleteAnnouncement
  createTags(tagList: [String]!): CreateTags
}

type ObtainJSONWebToken {
  payload: GenericScalar!
  refreshExpiresIn: Int!
  token: String!
}

type Query {
  users: [UserType]
  user(id: Int): UserType
  userProfile(id: Int): UserProfileType
  me: UserProfileType
  announcement(id: Int): AnnouncementType
  foundAnnouncements: [AnnouncementType]
  lostAnnouncements: [AnnouncementType]
  announcementsSearchByContent(search: String): [AnnouncementType]
  announcementsByTag(annType: String, tag: String): [AnnouncementType]
  tags: [TagType]
}

type Refresh {
  payload: GenericScalar!
  refreshExpiresIn: Int!
  token: String!
}

type TagType {
  id: ID!
  name: String!
}

type UpdateAnnouncement {
  id: ID
  msg: String
}

type UpdateUserProfile {
  apiMsg: String
  msg: String
}

scalar Upload

type UserProfileType {
  id: ID!
  user: UserType!
  phone: String!
  location: String!
  creditDetails: String!
  image: String!
  dateOfBirth: Date!
  rating: Int!
  announcementSet: [AnnouncementType!]!
}

type UserType {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
}

type Verify {
  payload: GenericScalar!
}
